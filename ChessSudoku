package project;

import java.util.*;
import java.io.*;


public class ChessSudoku
{
    public int SIZE, N;

    public int grid[][];

    public boolean knightRule;
    public boolean kingRule;
    public boolean queenRule;

    private int lastSol[][];

    private int unsolved[];

    // Field that stores the same Sudoku puzzle solved in all possible ways
    public HashSet<ChessSudoku> solutions = new HashSet<ChessSudoku>();


    public void solve(boolean allSolutions) {
        solveEasy(allSolutions);
    }

    private boolean solveEasy(boolean allSolutions) {
        //iterate through rows and columns

        for (int row = 0; row < N; row++) {
            for (int col = 0; col < N; col++) {
                //skip filled boxes
                if (grid[row][col] != 0) {
                    continue;
                }
                if (unsolved == null) {
                    unsolved = new int[2];
                    unsolved[0] = row;
                    unsolved[1] = col;

                }
                //iterate through all possible values from 0 to N
                for (int value = 1; value < N + 1; value++) {
                    //check if value passes all checks
                    if (possibleMoves(row, col, value)) {
                        //add value to this box since it passes all checks
                        grid[row][col] = value;
                        if (allSolutions && row == N - 1 && col == N - 1) {
                            int[][] solutionsStorage = new int[N][N];
                            for (int i = 0; i < N; i++) {
                                for (int j = 0; j < N; j++) {
                                    solutionsStorage[i][j] = grid[i][j];
                                }
                            }
                            //store in solutions in hashset
                            ChessSudoku tempSol = new ChessSudoku(SIZE);
                            tempSol.grid = solutionsStorage;
                            solutions.add(tempSol);
                            lastSol = tempSol.grid;

                        }
                        //backtracking
                        if (solveEasy(allSolutions) && !allSolutions) {
                            return true;

                        } else {
                            grid[row][col] = 0;
                        }
                    }

                }

                if (unsolved[0] == row && unsolved[1] == col && allSolutions) {
                    grid = lastSol;
                }

                return false;
            }

        }
        return true;
    }


    private boolean possibleMoves(int row, int col, int value) {
        //function to check if value passes all checks
        return rowCheck(row, value) && columnCheck(col, value) && subsectionCheck(row, col, value) &&
                knightCheck(row, col, value) && kingCheck(row, col, value) && queenCheck(row, col, value);
    }

    private boolean rowCheck(int row, int value) {
        //iterate through all rows
        for (int i = 0; i < N; i++) {
            //if value already in row we return false and it does not pass the check
            if (grid[row][i] == value) {
                return false;
            }
        }
        return true;
    }

    private boolean columnCheck(int col, int value) {
        for (int i = 0; i < N; i++) {
            //same as row but for columns
            if (grid[i][col] == value) {
                return false;
            }
        }
        return true;
    }

    private boolean subsectionCheck(int row, int col, int value) {
        //get starting values for each smaller box within the bigger box
        int rowExtremity = row - row % SIZE;
        int columnExtremity = col - col % SIZE;
        //iterate through all values in sub-box
        for (int i = rowExtremity; i < rowExtremity + SIZE; i++) {
            for (int j = columnExtremity; j < columnExtremity + SIZE; j++) {
                //check if value already there
                if (grid[i][j] == value) {
                    return false;
                }
            }
        }
        return true;
    }

    private boolean kingCheck(int row, int col, int value) {
        //check if rule is applied or not
        if (kingRule) {
            //check if value is one move away diagonally
            if (row - 1 >= 0) {
                if (col - 1 >= 0 && grid[row - 1][col - 1] == value) {
                    return false;
                }
                if (col + 1 < N && grid[row - 1][col + 1] == value) {
                    return false;
                }

            }

            if (row + 1 < N) {
                if (col - 1 >= 0 && grid[row + 1][col - 1] == value) {
                    return false;
                }
                return col + 1 >= N || grid[row + 1][col + 1] != value;
            }

        }
        return true;
    }

    private boolean knightCheck(int row, int col, int value) {
        if (knightRule) {

            //check if value is equal to number within an L
            if (row - 2 >= 0) {

                if (col - 1 >= 0 && grid[row - 2][col - 1] == value) {
                    return false;
                }

                if (col + 1 < N && grid[row - 2][col + 1] == value) {
                    return false;
                }
            }
            if (row - 1 >= 0) {

                if (col - 2 >= 0 && grid[row - 1][col - 2] == value) {

                    return false;
                }

                return col + 2 >= N || grid[row - 1][col + 2] != value;
            }

            if (row + 2 < N) {
                if (col - 1 >= 0 && grid[row + 2][col - 1] == value) {
                    return false;
                }
                if (col + 1 < N && grid[row + 2][col + 1] == value) {
                    return false;
                }
            }
            if (row + 1 < N) {
                if (col - 2 >= 0 && grid[row + 1][col - 2] == value) {
                    return false;
                }

                if (col + 2 < N && grid[row + 1][col + 2] == value) {
                    return false;
                }

            }


        }
        return true;
    }

    private boolean queenCheck(int row, int col, int value) {
        if (queenRule) {

            //check if the value were checking is the max value, which is always the total size of sudoku
            if (value != N) {
                return true;
            }

            //iterate through all diagonals
            for (int x = 1; row + x < N || col + x < N || row - x >= N || col - x >= N; x++) {
                //check all diagonals for same number as value we are checking
                if (row + x < N) {
                    if (col + x < N && grid[row + x][col + x] == value) {
                        return false;
                    }
                    if (col - x >= 0 && grid[row + x][col - x] == value) {
                        return false;
                    }
                }

                if (row - x >= 0) {
                    if (col + x < N && grid[row - x][col + x] == value) {
                        return false;
                    }
                    if (col - x >= 0 && grid[row - x][col - x] == value) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    
    /* Default constructor.  This will initialize all positions to the default 0
     * value.  Use the read() function to load the Sudoku puzzle from a file or
     * the standard input. */
    public ChessSudoku( int size ) {
        SIZE = size;
        N = size*size;

        grid = new int[N][N];
        for( int i = 0; i < N; i++ )
            for( int j = 0; j < N; j++ )
                grid[i][j] = 0;
    }


    /* readInteger is a helper function for the reading of the input file.  It reads
     * words until it finds one that represents an integer. For convenience, it will also
     * recognize the string "x" as equivalent to "0". */
    static int readInteger( InputStream in ) throws Exception {
        int result = 0;
        boolean success = false;

        while( !success ) {
            String word = readWord( in );

            try {
                result = Integer.parseInt( word );
                success = true;
            } catch( Exception e ) {
                // Convert 'x' words into 0's
                if( word.compareTo("x") == 0 ) {
                    result = 0;
                    success = true;
                }
                // Ignore all other words that are not integers
            }
        }

        return result;
    }


    /* readWord is a helper function that reads a word separated by white space. */
    static String readWord( InputStream in ) throws Exception {
        StringBuffer result = new StringBuffer();
        int currentChar = in.read();
        String whiteSpace = " \t\r\n";
        // Ignore any leading white space
        while( whiteSpace.indexOf(currentChar) > -1 ) {
            currentChar = in.read();
        }

        // Read all characters until you reach white space
        while( whiteSpace.indexOf(currentChar) == -1 ) {
            result.append( (char) currentChar );
            currentChar = in.read();
        }
        return result.toString();
    }


    /* This function reads a Sudoku puzzle from the input stream in.  The Sudoku
     * grid is filled in one row at at time, from left to right.  All non-valid
     * characters are ignored by this function and may be used in the Sudoku file
     * to increase its legibility. */
    public void read( InputStream in ) throws Exception {
        for( int i = 0; i < N; i++ ) {
            for( int j = 0; j < N; j++ ) {
                grid[i][j] = readInteger( in );
            }
        }
    }


    /* Helper function for the printing of Sudoku puzzle.  This function will print
     * out text, preceded by enough ' ' characters to make sure that the printint out
     * takes at least width characters.  */
    void printFixedWidth( String text, int width ) {
        for( int i = 0; i < width - text.length(); i++ )
            System.out.print( " " );
        System.out.print( text );
    }


    /* The print() function outputs the Sudoku grid to the standard output, using
     * a bit of extra formatting to make the result clearly readable. */
    public void print() {
        // Compute the number of digits necessary to print out each number in the Sudoku puzzle
        int digits = (int) Math.floor(Math.log(N) / Math.log(10)) + 1;

        // Create a dashed line to separate the boxes
        int lineLength = (digits + 1) * N + 2 * SIZE - 3;
        StringBuffer line = new StringBuffer();
        for( int lineInit = 0; lineInit < lineLength; lineInit++ )
            line.append('-');

        // Go through the grid, printing out its values separated by spaces
        for( int i = 0; i < N; i++ ) {
            for( int j = 0; j < N; j++ ) {
                printFixedWidth( String.valueOf( grid[i][j] ), digits );
                // Print the vertical lines between boxes
                if( (j < N-1) && ((j+1) % SIZE == 0) )
                    System.out.print( " |" );
                System.out.print( " " );
            }
            System.out.println();

            // Print the horizontal line between boxes
            if( (i < N-1) && ((i+1) % SIZE == 0) )
                System.out.println( line.toString() );
        }
    }

    /* The main function reads in a Sudoku puzzle from the standard input,
     * unless a file name is provided as a run-time argument, in which case the
     * Sudoku puzzle is loaded from that file.  It then solves the puzzle, and
     * outputs the completed puzzle to the standard output. */
    public static void main( String args[] ) throws Exception {
        InputStream in = new FileInputStream("veryEasy3x3_twoSolutions.txt");

        // The first number in all Sudoku files must represent the size of the puzzle.  See
        // the example files for the file format.
        int puzzleSize = readInteger( in );
        if( puzzleSize > 100 || puzzleSize < 1 ) {
            System.out.println("Error: The Sudoku puzzle size must be between 1 and 100.");
            System.exit(-1);
        }

        ChessSudoku s = new ChessSudoku( puzzleSize );

        // You can modify these to add rules to your sudoku
        s.knightRule = false;
        s.kingRule = false;
        s.queenRule = false;

        // read the rest of the Sudoku puzzle
        s.read( in );

        System.out.println("Before the solve:");
        s.print();
        System.out.println();

        // Solve the puzzle by finding one solution.
        s.solve(true);

        // Print out the (hopefully completed!) puzzle
        System.out.println("After the solve:");
        s.print();
    }
}
